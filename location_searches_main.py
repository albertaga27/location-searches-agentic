#!/usr/bin/env python3
"""
Location Risk Assessment Application

This application performs deep research on locations/buildings and then conducts
comprehensive risk assessment analysis using AI agents.
"""

import os
import re
import asyncio
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv

# Import the agent functionality from the separate modules
from deep_research_plugin import DeepResearchPlugin, create_deep_research_agent
from risk_agent import RiskAssessmentPlugin, create_risk_assessment_agent


async def main():
    """Main function to run the location risk assessment application"""
    
    # Clear the console
    os.system('cls' if os.name=='nt' else 'clear')
    
    print("🏗️ Location Risk Assessment - AI Analysis System")
    print("=" * 65)
    print("This system performs comprehensive location analysis in two stages:")
    print("1. 🔬 Deep Research - Comprehensive research on your location/building")
    print("2. 🚨 Risk Assessment - Professional risk analysis")
    print("=" * 65)
    print("Enter a location, building, or asset to analyze:")
    print("Examples:")
    print("• 'Empire State Building, New York'")
    print("• 'Downtown Seattle office building at 1st and Pike'") 
    print("• 'Residential area in Miami Beach, Florida'")
    print("• 'Industrial facility in Houston, Texas'")
    print("=" * 65)
    
    # Interactive mode - keep asking for input until user exits
    while True:
        try:
            # Get location input
            location_input = input("\nEnter location/building to analyze (or 'exit' to quit): ").strip()
            
            if location_input.lower() in ['exit', 'quit', '']:
                print("Goodbye!")
                break
            
            # Process the complete research and risk assessment workflow
            await process_location_risk_assessment(location_input)
            
        except KeyboardInterrupt:
            print("\n\nAnalysis cancelled by user.")
            break
        except EOFError:
            # Handle case when input stream is closed (e.g., piped input)
            print("\nInput stream closed. Exiting application.")
            break
        except Exception as e:
            print(f"❌ Application error: {e}")
            print("Please try again or type 'exit' to quit.")


def sanitize_filename(filename: str) -> str:
    """Sanitize a string to be used as a safe filename"""
    # Remove or replace invalid characters
    sanitized = re.sub(r'[<>:"/\\|?*]', '_', filename)
    # Remove extra whitespace and replace spaces with underscores
    sanitized = re.sub(r'\s+', '_', sanitized.strip())
    # Remove leading/trailing dots and spaces
    sanitized = sanitized.strip('. ')
    # Limit length to 100 characters
    if len(sanitized) > 100:
        sanitized = sanitized[:100]
    # Ensure it's not empty
    if not sanitized:
        sanitized = "unknown_location"
    return sanitized


def save_analysis_to_file(location_input: str, research_result: str, risk_assessment: str) -> str:
    """Save the complete analysis to a markdown file"""
    try:
        # Create the output directory if it doesn't exist
        output_dir = Path("researches")
        output_dir.mkdir(exist_ok=True)
        
        # Create a sanitized filename
        sanitized_name = sanitize_filename(location_input)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{sanitized_name}_{timestamp}.md"
        filepath = output_dir / filename
        
        # Create the markdown content
        current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        markdown_content = f"""# Location Risk Assessment Report

**Location:** {location_input}  
**Analysis Date:** {current_date}  
**Generated by:** AI Location Risk Assessment System

---

## 📊 Deep Research Analysis

{research_result}

---

## 🚨 Risk Assessment Analysis

{risk_assessment}

---

## 📄 Report Information

- **File Generated:** {filename}
- **Analysis Timestamp:** {current_date}
- **Location Analyzed:** {location_input}

---

*This report was generated by the AI Location Risk Assessment System. The analysis combines comprehensive research with professional risk assessment to provide actionable insights for location-based decision making.*
"""
        
        # Write the content to the file
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
        
        return str(filepath)
        
    except Exception as e:
        print(f"⚠️ Warning: Could not save analysis to file: {e}")
        return ""


async def process_location_risk_assessment(location_input: str):
    """Process complete location research and risk assessment workflow"""
    try:
        print(f"\n🔬 Starting comprehensive analysis for: {location_input}")
        print("=" * 60)
        
        # Stage 1: Deep Research
        print("📊 Stage 1: Comprehensive Location Research")
        print("-" * 50)
        
        deep_research_plugin = create_deep_research_plugin()
        research_result = await deep_research_plugin.deep_research(location_input)
        
        print("✅ Research Complete!")
        print(f"📋 Research Results:\n{research_result}")
        
        # Stage 2: Risk Assessment
        print("\n🚨 Stage 2: Risk Assessment Analysis")
        print("-" * 50)
        
        risk_plugin = create_risk_assessment_plugin()
        risk_assessment = await risk_plugin.assess_risks(
            research_data=f"Location: {location_input}\n\nResearch Data:\n{research_result}",
            location=location_input
        )
        
        print("✅ Risk Assessment Complete!")
        print(f"⚠️ Risk Analysis:\n{risk_assessment}")
      
        print("✅ Analysis Complete!")
        
        # Save the analysis to a markdown file
        saved_file = save_analysis_to_file(location_input, research_result, risk_assessment)
        if saved_file:
            print(f"💾 Analysis saved to: {saved_file}")
        
        print("\n" + "=" * 60)
        print("📋 COMPLETE ANALYSIS SUMMARY")
        print("=" * 60)
        print("This comprehensive analysis provides:")
        print("• Detailed location research and background information")
        print("• Professional risk assessment across multiple factors")
        if saved_file:
            print(f"• Results saved to: {saved_file}")
        print("=" * 60)
        
    except Exception as e:
        print(f"❌ Error during analysis: {e}")
        print("Please try again with a different location or check your input.")


def create_deep_research_plugin():
    """Create and return a Deep Research plugin instance"""
    from deep_research_plugin import DeepResearchPlugin
    return DeepResearchPlugin()


def create_risk_assessment_plugin():
    """Create and return a Risk Assessment plugin instance"""
    from risk_agent import RiskAssessmentPlugin
    return RiskAssessmentPlugin()


def run_application():
    """Entry point for running the application"""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nApplication terminated by user.")
    except Exception as e:
        print(f"❌ Critical application error: {e}")


if __name__ == "__main__":
    run_application()